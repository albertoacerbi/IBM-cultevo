* [@ed_hagen](https://twitter.com/ed_hagen/status/1333547688223072256)
* [@fuasroli](https://twitter.com/fusaroli/status/1333717899115192320)

Bret: 

I would also consider removing all reference to the tidyverse (which is separable from ggplot for graphics). If you replace the tibble() calls with data.frame() calls, there's no tidyverse aspect to the book as far as I can see - no pipes, no purrr mapping, no tidyr reshaping, no dplyr manipulations, though I just looked quickly through the code.

Politically, the tidyverse / Rstudio people like Wickham and Bryan are actively opposed to the book's goals of developing skills in scientific simulation and generative inference. They are kind of fanatics who see things like using loops and matrix manipulations to populate data structures as not "tidy". They are not our allies on this topic, and I wouldn't do them any favors.

The trouble is that tidyverse was made for efficient data processing tasks, where the data already exists to be manipulated and analyzed, rather than for iterated loops over a table which is the basis for evolutionary simulations. Wickham has a talk about why you shouldn't use loops vs using purrrr::map, for example, and I've seen tidy advocates argue that we shouldn't be teaching people how to write for-loops at all anymore. Many of the subsetting operations in your code, for example, could be re-written using dplyr filter() statements. At MPI-EVA we emphasize that it's valuable to know tidy functions, but the core of what we do requires skills they tend to degenerate for their use-cases. It's probably better to have such a conversation over beers someday.

Damien Farine:

I have just one comment, which is quite general. The text in each section has quite some nice explanations of the code, but from my reading it almost never details the assumptions behind transmission mechanisms or tutor choices being modelled. For example, it seems important in Chapter 5 that individuals only copy one tutor, in Chapter 4 that individuals can use the same individual more than once as a tutor, that individuals can be both mothers and fathers in Chapter 6, etc. For anyone modelling large populations the present code will not violate reality too much, but in small populations it could create weird outcomes.

Dominik Deffner:

All in all, this is an extremely valuable and timely resource that I would have loved to have starting my PhD. I've heard many people complain that there is no go-to guide when it comes to start modeling, so you are definitely providing a great service to the community. Also the fact that it's all free and open is of course amazing. Thank you for that!!! I also really like that you include "the classics" such as Rogers' model and Henrich's Tasmania model alongside with more modern stuff such as network dynamics and multiple-trait models. 

My general feeling, however, is that at the moment the text is a bit too focussed on the coding details with not enough emphasis on the actual (evolutionary) theory. I know it is supposed to be a very hands-on guide to start building your own models, but I feel like the coding is generally not the limiting factor for most people. Most scientists these days will have some familiarity with R (or Python/Matlab), but there is a great deal of conceptual tools that need to be in place, before you can start modeling. Just as an example, what is fitness in evolutionary models? Fitness does not correspond to the arithmetic mean across generation (as you suggest analyzing Rogers' paradox) but to the (stochastic) lineage growth rate, which (in models without age-/stage-structure) can be calculated as the geometric mean. I think the text would definitely benefit from some more discusson of foundational concepts of general theoretical populaton biology, such as fitness, bet hedging, selection, ways to model traits, mutation, environmental stochasticity, etc. Another great difficulty for many newbies (me included) concerns the use und justification of assumptions to make inferences. Which assumptions are "innocent" and which could make a difference? Where do I need to be realistic and where is abstraction required? 

I personally also don't like the strong emphasis on tidyverse (why not just use matrices instead of those tibbles?), but I know that's more of a personal taste. Especially given the speed limitations in R, it might be best to provide readers with rather general coding strategies that can easily be transferred to other languages (like Julia, Marco ;) ). This makes the text also more accessible to readers with stronger backgrounds in other languages or base R. 